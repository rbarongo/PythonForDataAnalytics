{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0f2d6b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"hello python\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ff73a94",
   "metadata": {},
   "outputs": [],
   "source": [
    "#printing hello\n",
    "print('hello')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94e4556f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#variables\n",
    "x = \"hello\"\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fbf31c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"rwey\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0db6f33b",
   "metadata": {},
   "outputs": [],
   "source": [
    "pi = 22/7\n",
    "print(pi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddee1893",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Variables\n",
    "tz_oil_price = 2512.45\n",
    "print(tz_oil_price)\n",
    "\n",
    "tzOilPrice = 2404.13\n",
    "print(tzOilPrice)\n",
    "\n",
    "_tzOilPrice = 2404.13\n",
    "print(_tzOilPrice)\n",
    "\n",
    "#_tzOil Price = 2404.13\n",
    "#print(_tzOil Price)\n",
    "\n",
    "_tzOilPrice2021 = 2404.13\n",
    "print(_tzOilPrice2021)\n",
    "\n",
    "#_tzOilPrice2021* = 2404.13\n",
    "#print(_tzOilPrice2021*)\n",
    "\n",
    "#1_tzOilPrice2021 = 2404.13\n",
    "#print(1_tzOilPrice2021)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6e1c12d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Data types\n",
    "#Text str\n",
    "tz_currency = \"shilling\"\n",
    "ke_currency = 'shilling'\n",
    "print(tz_currency)\n",
    "\n",
    "#Numeric int float complex\n",
    "usd_tz_rate = 2454.34   #float  \n",
    "num_region_tz = 31      #int\n",
    "print(usd_tz_rate)\n",
    "print(num_region_tz)\n",
    "\n",
    "#Boolean\n",
    "has_risk = True\n",
    "has_npl_risk = False\n",
    "\n",
    "#Sequence Types list tuple\n",
    "stairs = [1,2,3,4,5]          #list   can change\n",
    "stairs_tuple = (1,2,3,4,5)    #tuple  can not change\n",
    "#banks_in_tz =  ['']              #list\n",
    "#Set      set\n",
    "stairs_set = {1,2,3,4,5}      #do not allow duplicate\n",
    "\n",
    "#Mapping  dictionary\n",
    "days_of_week = {1:\"sunday\", 2:\"monday\"}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fda88482",
   "metadata": {},
   "outputs": [],
   "source": [
    "if(has_risk):\n",
    "    print(\"Has risk\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da53fc4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "stairs = ['CRDB','NBC','EXIM']          \n",
    "print(stairs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5b8ddb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#for a list of n objects, if you want to display nth object use listname[n-1]\n",
    "#print first element\n",
    "print(stairs[0])\n",
    "\n",
    "#print second element\n",
    "print(stairs[1])\n",
    "\n",
    "#print third element\n",
    "print(stairs[2])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b772951c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#print third element\n",
    "print(stairs[-3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6376f35",
   "metadata": {},
   "outputs": [],
   "source": [
    "#to know data type\n",
    "y = 455.3\n",
    "type(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2b4d008",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = int(y)\n",
    "type(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa82200e",
   "metadata": {},
   "outputs": [],
   "source": [
    "if isinstance(y, int):\n",
    "    print(\"it is integer\")\n",
    "    print(type(y))\n",
    "else:\n",
    "    print(\"it is not integer\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d0e726c",
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers = [1, 2, 3, 4, 2, 5]\n",
    "type(numbers)\n",
    "\n",
    "# check if numbers is instance of list\n",
    "result = isinstance(numbers, list)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cefbdbf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "loan_classification = [1,2,'current',3]\n",
    "\n",
    "for value in loan_classification:\n",
    "    if isinstance(value, int):\n",
    "        print('ok it is integer')\n",
    "    else:\n",
    "        print('it is not integer')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e4c2b0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#operations\n",
    "#addition, subtraction, division, multiplication, exponent, logarithm\n",
    "\n",
    "#addition\n",
    "x = 5  #int\n",
    "y = 7  #int\n",
    "z = x + y\n",
    "print(z)\n",
    "type(z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd10efc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5.2\n",
    "y = 7\n",
    "z = x + y\n",
    "print(z)\n",
    "type(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe609502",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5.2\n",
    "m = 'hello'\n",
    "z = x + m\n",
    "print(z)\n",
    "type(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "431ca25a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#subtraction\n",
    "p = x - y\n",
    "p = round(p,2)\n",
    "print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77fbbdd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#multiplication\n",
    "t = x * y\n",
    "print(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c73ba146",
   "metadata": {},
   "outputs": [],
   "source": [
    "#division\n",
    "u = x / y\n",
    "u = round(u,3)\n",
    "print(u)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "0aeb8b38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.6\n",
      "6\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "#modulus or reminder\n",
    "#33 / 5\n",
    "#you want 6\n",
    "#you want 3\n",
    "print(33/5)  # 6.6\n",
    "print(33//5) # 6\n",
    "print(33 % 5) # 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72e344c3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca262e32",
   "metadata": {},
   "outputs": [],
   "source": [
    " math. floor() function rounds down to the next full integer.\n",
    "The math. ceil()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65f5c0b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "aa = math.ceil(33.7)\n",
    "print(aa)\n",
    "#you can also use print(math.ceil(33.7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "6c16c215",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-34\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "ab = math.floor(-33.7)\n",
    "print(ab)\n",
    "#-34\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b1cb754",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
